import { render } from "@testing-library/react";
import About from "../components/about/about.component";
import ErrorBoundary from "../components/errors/boundary/error.boundary.component";
import routes from "../config/routes";
import Events from "../events/events";
import Page, { getStaticProps } from "../pages/about";
import mockCheckCall from "../tests/fixtures/mock.component.call";
import getPageProps from "../utils/page.props.static";

jest.mock("../utils/page.props.static", () =>
  jest.fn(() => "mockGetStaticProps")
);

jest.mock("../components/errors/boundary/error.boundary.component", () =>
  require("../tests/fixtures/mock.component.children.factory.class").factoryInstance.create(
    "ErrorBoundary"
  )
);

jest.mock("../components/about/about.component", () =>
  require("../tests/fixtures/mock.component.children.factory.class").factoryInstance.create(
    "About"
  )
);

describe("getStaticProps", () => {
  it("should be generated by the correct call to pagePropsGenerator", () => {
    expect(getPageProps).toBeCalledTimes(1);
    expect(getPageProps).toBeCalledWith({
      pageKey: "about",
      translations: ["about"],
    });
    expect(getStaticProps).toBe("mockGetStaticProps");
  });
});

describe("About", () => {
  const arrange = () => {
    render(<Page />);
  };

  beforeEach(() => jest.clearAllMocks());

  describe("when rendered", () => {
    beforeEach(() => arrange());

    it("should call the ErrorBoundary component correctly", () => {
      expect(ErrorBoundary).toBeCalledTimes(1);
      mockCheckCall(
        ErrorBoundary,
        {
          route: routes.home,
          eventDefinition: Events.General.Error,
        },
        0,
        ["stateReset"]
      );
    });

    it("should call the Splash component", () => {
      expect(About).toBeCalledTimes(1);
      mockCheckCall(About, {});
    });
  });
});
