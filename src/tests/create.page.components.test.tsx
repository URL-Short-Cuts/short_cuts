import { render } from "@testing-library/react";
import CreateUrl from "../components/create/create.container.component";
import ErrorBoundary from "../components/errors/boundary/error.boundary.component";
import routes from "../config/routes";
import Events from "../events/events";
import FourOhFour from "../pages/_notFound";
import Page, { getStaticProps } from "../pages/create";
import mockCheckCall from "../tests/fixtures/mock.component.call";
import mockWindow, { restoreWindow } from "../tests/fixtures/mock.window";
import getPageProps from "../utils/page.props.static";

jest.mock("../utils/page.props.static", () =>
  jest.fn(() => "mockGetStaticProps")
);

jest.mock("../components/errors/boundary/error.boundary.component", () =>
  require("../tests/fixtures/mock.component.children.factory.class").factoryInstance.create(
    "ErrorBoundary"
  )
);

jest.mock("../components/create/create.container.component", () =>
  jest.fn(() => <div>CreateUrl</div>)
);

jest.mock("../pages/_notFound", () => jest.fn(() => <div>FourOhFour</div>));

describe("getStaticProps", () => {
  it("should be generated by the correct call to pagePropsGenerator", () => {
    expect(getPageProps).toBeCalledTimes(1);
    expect(getPageProps).toBeCalledWith({
      pageKey: "create",
      translations: ["create"],
    });
    expect(getStaticProps).toBe("mockGetStaticProps");
  });
});

describe("Index", () => {
  const testURL = "http:/yahoo.com";

  const arrange = () => {
    render(<Page />);
  };

  beforeAll(() => {
    mockWindow();
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    restoreWindow();
  });

  describe("with a proper query string", () => {
    beforeEach(() => {
      const searchParams = new URLSearchParams(window.location.search);
      searchParams.set("url", testURL);
      window.location.search = searchParams.toString();
      arrange();
    });

    it("should call the ErrorBoundary component correctly", () => {
      expect(ErrorBoundary).toBeCalledTimes(1);
      mockCheckCall(
        ErrorBoundary,
        {
          route: routes.home,
          eventDefinition: Events.General.Error,
        },
        0,
        ["stateReset"]
      );
    });

    it("should call the CreateUrl component correctly", () => {
      expect(CreateUrl).toBeCalledTimes(1);
      mockCheckCall(CreateUrl, {
        url: testURL,
      });
    });

    it("should NOT call the FourOhFour component", () => {
      expect(FourOhFour).toBeCalledTimes(0);
    });
  });

  describe("with no query string", () => {
    beforeEach(() => {
      window.location.search = "";
      arrange();
    });

    it("should call the FourOhFour component correctly", () => {
      expect(FourOhFour).toBeCalledTimes(1);
      mockCheckCall(FourOhFour, {});
    });

    it("should NOT call the ErrorBoundary component", async () => {
      expect(ErrorBoundary).toBeCalledTimes(0);
    });

    it("should NOT call the CreateUrl component", () => {
      expect(CreateUrl).toBeCalledTimes(0);
    });
  });
});
